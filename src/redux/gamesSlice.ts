/* eslint-disable no-param-reassign */
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import { fetchGames } from './counterAPI'

export interface CounterState {
  data: any
  status: 'idle' | 'loading' | 'failed'
  error: any
}

const initialState: CounterState = {
  data: {},
  status: 'idle',
  error: '',
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

// @ts-ignore
export const fetchGamesAsync = createAsyncThunk('games/fetch', async () => {
  const res = await fetchGames()
  // The value we return becomes the `fulfilled` action payload
  //   console.log(response)
  console.log(res)
  // @ts-ignore
  return res.data.listGames
})

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchGamesAsync.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(fetchGamesAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        state.data = action.payload
      })
      .addCase(fetchGamesAsync.rejected, (state) => {
        state.status = 'idle'
        state.error = { error: "Can't query now." }
      })
  },
})

// export const selectData = (state: RootState) => state.games

// export const { increment, decrement, incrementByAmount } = counterSlice.actions

export default counterSlice.reducer
